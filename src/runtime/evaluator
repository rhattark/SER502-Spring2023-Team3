update(Var, Val, [], [(Var, Val)]).
update(Var, Val, [(Var, _) | Env], [(Var,Val) | Env]).
update(Var, Val, [(Var1, Val2) | L], [(Var1,Val2) | Env]):-
    Var \= Var1,
    update(Var,Val,L,Env).

lookup(Var, [(Var, Val) | _], Val).
lookup(Var, [_ | T], Val) :- lookup(Var, T, Val).

% Test
% program_eval(t_prog(t_act(t_single_scene_list(t_scene(t_single_stmt_list( t_statement(t_print(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))))))))))) , [("result" ,12 )] , X ).
% 12
% X = [("result", 12)] .
% program_eval(t_prog(t_act(t_single_scene_list(t_scene(t_single_stmt_list( t_statement(t_print(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))))))))))) , [("result" ,12 )] , X ). 
program_eval(t_prog(X), Env, NewEnv):- act_eval(X, Env, NewEnv).
act_eval(t_act(X), Env, NewEnv):- scene_list_eval(X, Env, NewEnv).

% Test
% scene_list_eval(t_single_scene_list(t_scene(t_single_stmt_list( t_statement(t_print(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))))))))) , [("result" ,12 )] , X ). 
% 12
% X = [("result", 12)] .
scene_list_eval(t_single_scene_list(X), Env, NewEnv):- scene_declaration_eval(X, Env, NewEnv).

% Test
%scene_list_eval(t_multi_scene_list(t_scene(t_single_stmt_list(t_statement(t_print(t_string(t_str(t_letter(h),t_str_char(t_letter(e),t_str_char(t_letter(l),t_str_char(t_letter(l),t_str_char(t_letter(o),t_str_char(t_letter(w),t_str_char(t_letter(o),t_str_char(t_letter(r),t_str_char(t_letter(l),t_str_char(t_letter(d),t_char))))))))))))))),t_single_scene_list(t_scene(t_single_stmt_list(t_statement(t_print(t_string(t_str(t_letter(h),t_str_char(t_letter(i),t_char))))))))) , [] , X).
% helloworld
% hi
% X = [].
scene_list_eval(t_multi_scene_list(X, Y), Env, NewEnv) :-
    scene_declaration_eval(X, Env, NewEnv1),
    scene_list_eval(Y, NewEnv1, NewEnv).

% Test
% scene_declaration_eval(t_scene(t_single_stmt_list( t_statement(t_print(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char))))))))))) , [("result" ,12 )] , X ).
% 12
% X = [("result", 12)] .
scene_declaration_eval(t_scene(X) , Env , NewEnv) :- 
    statement_list_eval(X , Env , NewEnv).

% TODO :- variable declaration for bool and numeral
% t_var_dec(t_datatype(verse),t_assign(t_identifier(t_str(t_letter(x),t_char)),t_string(t_str(t_letter(h),t_str_char(t_letter(e),t_str_char(t_letter(l),t_str_char(t_letter(l),t_str_char(t_letter(o),t_char))))))))
variable_declaration_eval(t_var_dec(X,Y), Env, NewEnv) :-
    datatype_eval(X, verse),
    assignment_eval(Y, Env, NewEnv, String_eval),
    string(String_eval).

% Test
% datatype_eval(t_datatype(numeral), X).
% X = numeral.
datatype_eval(t_datatype(numeral), numeral).
datatype_eval(t_datatype(verse), verse).
datatype_eval(t_datatype(bool), bool).

% Test
% assignment_eval(t_assign(t_identifier(t_str(t_letter(x),t_char)),t_string(t_str(t_letter(h),t_str_char(t_letter(e),t_str_char(t_letter(l),t_str_char(t_letter(l),t_str_char(t_letter(o),t_char))))))), [("x", "hi")], Y, Z).
% Y = [("x", "hello")] .
assignment_eval(t_assign(X,Y), Env, NewEnv, String_eval):-
    identifier_eval(X, Id_eval),
    string_eval(Y, String_eval),
    update(Id_eval, String_eval, Env, NewEnv).

assignment_eval(t_assign(X,Y), Env, NewEnv, Value):- 
    identifier_eval(X, Id_eval), 
    % expression_eval(Y, Env, Value), 
    update(Id_eval, Value, Env, NewEnv).

%     % expression(t_expr(A)) --> arithmetic_expression(A) | boolean_expression(A).
% expression_eval(t_expr(A), Env, Value) :-
%     arithmetic_expression_eval(A, Env, Value).

% arithmetic_expression_eval(t_arith_expr_term(A), Env, Value) :-
%     arithmetic_term_eval(A, Env, Value).

% arithmetic_factor(t_arith_factor(X)) --> identifier(X)
% | number(X)
% | ['('], arithmetic_expression(X), [')'].
% TODO: arith expr in ()



% % arithmetic_term(t_arith_term_opr(A,B,C)) --> arithmetic_factor(A), mul_div_operator(B), arithmetic_term(C).
% arithmetic_term_eval(t_arith_term_opr(A,B,C), Env, Value) :-
%     arithmetic_factor_eval(A, Env, First),
%     mul_div_operator(B, *),
%     arithmetic_factor_eval(C, Env, Second),
%     Value is First * Second.

% arithmetic_term_eval(t_arith_term_fac(t_arith_factor(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char))))))))), [("result", 12)], Z).
% Z = 12 .
arithmetic_term_eval(t_arith_term_fac(A), Env, Value) :-
    arithmetic_factor_eval(A, Env, Value).

% arithmetic_factor_eval(t_arith_factor(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))))), [("result", 12)], Z).
% Z = 12 .
arithmetic_factor_eval(t_arith_factor(X), Env, Value) :-
    identifier_eval(X, Env, Value).

% arithmetic_factor_eval(t_arith_factor(t_dig_num(t_digit(1),t_dig_num(t_digit(2),t_dig_num(t_digit(6),t_dig_num(t_digit(5),t_num_dig(t_digit(1))))))), [], V).
% V = 15621.
arithmetic_factor_eval(t_arith_factor(X), _, Value) :-
    number_eval(X, Value).

% Test
% print_eval(t_print(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))))), [("result", 12)]).
% 12
print_eval(t_print(X), Env) :-
    identifier_eval(X, Env, Value),
    writeln(Value).

% Test
% print_eval(t_print(t_string(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))))), []).
% result
print_eval(t_print(X), _) :-
    string_eval(X, Value),
    writeln(Value).

% Test
% identifier_eval(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char))))))), Z).
identifier_eval(t_identifier(X), Value) :-
    my_string_eval(X, Value).

% Test
% identifier_eval(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char))))))), [("result", 12)], Z).
identifier_eval(t_identifier(X), Env, Value) :-
    my_string_eval(X, String_eval),
    lookup(String_eval, Env, Value).

% Test
% statement_list_eval(t_single_stmt_list( t_statement(t_print(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))))))) , [("result" ,12 )] , X ).      
% 12
% X = [("result", 12)] .
statement_list_eval(t_single_stmt_list(X), Env, NewEnv) :-
    statement_eval(X, Env, NewEnv).
% Test
% statement_list_eval(t_multi_stmt_list(t_statement(t_print(t_string(t_str(t_letter(a),t_str_char(t_letter(b),t_str_char(t_letter(c),t_char)))))),t_single_stmt_list(t_statement(t_print(t_string(t_str(t_letter(b),t_str_char(t_letter(c),t_str_char(t_letter(d),t_char)))))))), [("result", 12)], X).
%abc
%bcd
%X = [("result",12)]
statement_list_eval(t_multi_stmt_list(X,Y), Env, NewEnv) :- statement_eval(X, Env, NewEnv1), statement_list_eval(Y, NewEnv1, NewEnv).
% statement_list_eval(t_dec_stmt_list(X), Env, NewEnv) --> scene_declaration_eval(X, Env, NewEnv).

% Test
% statement_eval( t_statement(t_print(t_identifier(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char))))))))) , [("result" ,12 )] , X ).
% 12
statement_eval(t_statement(X), Env, Env):- print_eval(X,Env).
statement_eval(t_statement(X), Env, NewEnv):- conditional_eval(X, Env, NewEnv).
statement_eval(t_statement(X), Env, NewEnv):- ternary_eval(X, Env, NewEnv).
% statement_eval(t_statement(X), Env, NewEnv):- traditional_while_eval(X, Env, NewEnv).

bool_literal_eval(t_bool(aye),true).
bool_literal_eval(t_bool(nay),false).

boolean_expression_eval(t_bool_lit(X),  _, true):- bool_literal_eval(X, true).
boolean_expression_eval(t_bool_lit(X),  _, false):- bool_literal_eval(X, false).

% Test
% boolean_expression_eval(t_bool_not(t_bool_lit(t_bool(nay))), [], X).
% true.
boolean_expression_eval(t_bool_not(X), _, true):- boolean_expression_eval(X,_,false).
boolean_expression_eval(t_bool_not(X), _, false):-boolean_expression_eval(X,_,true).

% Test
% boolean_expression_eval(t_bool_and(t_bool(aye),t_bool(aye)), [],X).  
% X = true .
% boolean_expression_eval(t_bool_and(t_bool(aye),t_bool(nay)), [],X). 
% X = false .
% boolean_expression_eval(t_bool_and(t_bool(nay),t_bool(nay)), [],X). 
% X = false .
% boolean_expression_eval(t_bool_and(t_bool(nay),t_bool(aye)), [],X). 
% X = false .
% true.
boolean_expression_eval(t_bool_and(X,Y), _, true):- bool_literal_eval(X,true),bool_literal_eval(Y,true).
boolean_expression_eval(t_bool_and(X,Y), _, false):- bool_literal_eval(X,true),bool_literal_eval(Y,false).
boolean_expression_eval(t_bool_and(X,Y), _, false):- bool_literal_eval(X,false),bool_literal_eval(Y,true).
boolean_expression_eval(t_bool_and(X,Y), _, false):- bool_literal_eval(X,false),bool_literal_eval(Y,false).

% boolean_expression_eval(t_bool_or(t_bool(nay),t_bool(aye)), [],X).
% X = true.
% boolean_expression_eval(t_bool_or(t_bool(nay),t_bool(nay)), [],X).
% X = false .
% boolean_expression_eval(t_bool_or(t_bool(aye),t_bool(nay)), [],X).
% X = true.
boolean_expression_eval(t_bool_or(X,Y), _, true):- bool_literal_eval(X,true),bool_literal_eval(Y,true).
boolean_expression_eval(t_bool_or(X,Y), _, true):- bool_literal_eval(X,true),bool_literal_eval(Y,false).
boolean_expression_eval(t_bool_or(X,Y), _, true):- bool_literal_eval(X,false),bool_literal_eval(Y,true).
boolean_expression_eval(t_bool_or(X,Y), _, false):- bool_literal_eval(X,false),bool_literal_eval(Y,false).

% boolean_expression_eval(t_bool_and(t_identifier(t_str(t_letter(x),t_char)),t_identifier(t_str(t_letter(y),t_char))) , [("x",2),("y",2) , ("i", 4)],X ). 
% X = true .
boolean_expression_eval(t_bool_and(X,Y), Env, true):- 
    identifier_eval(X,Env,Val1), 
    identifier_eval(Y,Env,Val2),
    Val1=Val2.

% Test
% boolean_expression_eval(t_bool_and(t_identifier(t_str(t_letter(x),t_char)),t_identifier(t_str(t_letter(y),t_char))) , [("x",2),("y",3) , ("i", 4)],X ). 
% X = false .

boolean_expression_eval(t_bool_and(X,Y), Env, false):- 
    identifier_eval(X,Env,Val1), 
    identifier_eval(Y,Env,Val2),
    Val1\=Val2.
% boolean_expression_eval(t_bool_and(_,_), _, false).
% TODO: compare identifiers

% Test
% boolean_expression_eval(t_bool_or(t_bool(nay),t_bool(nay)), [],X).
% false.
boolean_expression_eval(t_bool_or(X,Y), _, false):- bool_literal_eval(X,false),bool_literal_eval(Y,false).
boolean_expression_eval(t_bool_or(_,_), _, true).

% Test
% conditional_eval(t_cond(t_bool_lit(t_bool(nay)),t_single_stmt_list(t_statement(t_print(t_string(t_str(t_letter(t),t_str_char(t_letter(r),t_str_char(t_letter(u),t_str_char(t_letter(e),t_char)))))))),t_single_stmt_list(t_statement(t_print(t_string(t_str(t_letter(f),t_str_char(t_letter(a),t_str_char(t_letter(l),t_str_char(t_letter(s),t_str_char(t_letter(e),t_char)))))))))),[("result",12)],X).
% false
conditional_eval(t_cond(A,B,_), Env, NewEnv):- boolean_expression_eval(A, Env, NewEnv1, true), statement_list_eval(B, NewEnv1, NewEnv).
conditional_eval(t_cond(A,_,C), Env, NewEnv):- boolean_expression_eval(A, Env, NewEnv1, false), statement_list_eval(C, NewEnv1, NewEnv).

% Test
% ternary_eval(t_tern(t_bool_lit(t_bool(aye)),t_single_stmt_list(t_statement(t_print(t_string(t_str(t_letter(t),t_str_char(t_letter(r),t_str_char(t_letter(u),t_str_char(t_letter(e),t_char)))))))),t_single_stmt_list(t_statement(t_print(t_string(t_str(t_letter(f),t_str_char(t_letter(a),t_str_char(t_letter(l),t_str_char(t_letter(s),t_str_char(t_letter(e),t_char)))))))))),[("result",12)],X).
% true
ternary_eval(t_tern(A,B,_), Env, NewEnv):- boolean_expression_eval(A, Env, NewEnv1, true), statement_list_eval(B, NewEnv1, NewEnv).
ternary_eval(t_tern(A,_,C), Env, NewEnv):- boolean_expression_eval(A, Env, NewEnv1, false), statement_list_eval(C, NewEnv1, NewEnv).

% traditional_while_eval(t_while(M,_), Env, NewEnv):- boolean_expression_eval(M, Env, NewEnv, false).
% traditional_while_eval(t_while(M,N), Env, NewEnv):- boolean_expression_eval(M, Env, NewEnv1, true), 
%     statement_list_eval(N, NewEnv1, NewEnv2), traditional_while_eval(M,N, NewEnv2, NewEnv).


% Test
% string_eval(t_string(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char))))))), X).
% X = "result".
string_eval(t_string(A), Z_out) :-
    my_string_eval(A, Z_out).

% Test
% my_string_eval(t_str(t_letter(r),t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char)))))), X).
% X = "result".
my_string_eval(t_str(X, Y), Z_out) :-
    letter_eval(X, Letter_eval),
    string_chars_eval(Y, String_eval),
    string_concat(Letter_eval, String_eval, Z_out).

% TODO:- test after digit eval is ready
% my_string_eval(t_str(X, Y), Z_out) :-
%     digit_eval(X, Letter_eval),
%     string_chars_eval(Y, String_eval),
%     string_concat(Letter_eval, String_eval, Z_out).

% Test
% string_chars_eval(t_str_char(t_letter(e),t_str_char(t_letter(s),t_str_char(t_letter(u),t_str_char(t_letter(l),t_str_char(t_letter(t),t_char))))), X).
% X = "esult".
string_chars_eval(t_char, "").

string_chars_eval(t_str_char(X,Y), Z_out) :-
    letter_eval(X, Letter_eval),
    string_chars_eval(Y, String_eval),
    string_concat(Letter_eval, String_eval, Z_out).

% Test
% number_eval(t_num, V).
% V = 0.
number_eval(t_num, 0).

% Test
% number_eval(t_num_dig(t_digit(1)), V).
% V = 1.
number_eval(t_num_dig(X), Value) :-
    digit_eval(X, Value).

% Test
% number_eval(t_dig_num(t_digit(1),t_dig_num(t_digit(2),t_dig_num(t_digit(6),t_dig_num(t_digit(5),t_num_dig(t_digit(1)))))), V).
% V = 15621.
number_eval(t_dig_num(X,Y), Value) :-
    digit_eval(X, Digit_eval),
    number_eval(Y, Number_eval),
    Value is Digit_eval + 10 * Number_eval.

add_sub_op_eval(t_add, +).
add_sub_op_eval(t_sub, -).
mul_div_operator(t_mul, *).
mul_div_operator(t_div, /).

letter_eval(t_letter('a'), 'a').
letter_eval(t_letter('b'), 'b').
letter_eval(t_letter('c'), 'c').
letter_eval(t_letter('d'), 'd').
letter_eval(t_letter('e'), 'e').
letter_eval(t_letter('f'), 'f').
letter_eval(t_letter('g'), 'g').
letter_eval(t_letter('h'), 'h').
letter_eval(t_letter('i'), 'i').
letter_eval(t_letter('j'), 'j').
letter_eval(t_letter('k'), 'k').
letter_eval(t_letter('l'), 'l').
letter_eval(t_letter('m'), 'm').
letter_eval(t_letter('n'), 'n').
letter_eval(t_letter('o'), 'o').
letter_eval(t_letter('p'), 'p').
letter_eval(t_letter('q'), 'q').
letter_eval(t_letter('r'), 'r').
letter_eval(t_letter('s'), 's').
letter_eval(t_letter('t'), 't').
letter_eval(t_letter('u'), 'u').
letter_eval(t_letter('v'), 'v').
letter_eval(t_letter('w'), 'w').
letter_eval(t_letter('x'), 'x').
letter_eval(t_letter('y'), 'y').
letter_eval(t_letter('z'), 'z').

digit_eval(t_digit(0), 0).
digit_eval(t_digit(1), 1).
digit_eval(t_digit(2), 2).
digit_eval(t_digit(3), 3).
digit_eval(t_digit(4), 4).
digit_eval(t_digit(5), 5).
digit_eval(t_digit(6), 6).
digit_eval(t_digit(7), 7).
digit_eval(t_digit(8), 8).
digit_eval(t_digit(9), 9).